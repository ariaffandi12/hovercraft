-- [Hovercrafts] War Tycoon - Dynamic Auto Upgrade System
-- Auto upgrade base tanpa money dengan deteksi dinamis

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local VirtualInputManager = game:GetService("VirtualInputManager")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Dynamic Auto Upgrade System
local AutoUpgradeSystem = {
    enabled = false,
    connections = {},
    detectedElements = {
        upgradeButtons = {},
        buildingPads = {},
        purchaseButtons = {},
        unlockButtons = {},
        remoteEvents = {},
        buildingModels = {}
    },
    scanPatterns = {
        buttonTexts = {
            "upgrade", "buy", "purchase", "unlock", "build", "construct", 
            "improve", "enhance", "level up", "advance", "develop",
            "expand", "install", "activate", "enable", "acquire"
        },
        buttonNames = {
            "UpgradeButton", "BuyButton", "PurchaseButton", "UnlockButton",
            "BuildButton", "ConstructButton", "InstallButton", "ActivateButton"
        },
        remoteNames = {
            "Upgrade", "Buy", "Purchase", "Unlock", "Build", "Construct",
            "Install", "Activate", "BuyItem", "PurchaseItem", "UnlockItem"
        },
        padNames = {
            "Pad", "Platform", "Foundation", "Base", "Plot", "Spot",
            "Area", "Zone", "Space", "Location", "Position"
        },
        buildingIndicators = {
            "Building", "Structure", "Facility", "Unit", "Tower", "Factory",
            "Generator", "Producer", "Collector", "Processor", "Station"
        }
    },
    bypassMethods = {
        moneyBypass = true,
        requirementBypass = true,
        cooldownBypass = true,
        levelBypass = true
    },
    upgradeQueue = {},
    lastScanTime = 0,
    scanInterval = 2,
    upgradeDelay = 0.5,
    maxUpgradesPerCycle = 10
}

-- Enhanced Notification System
local function createNotification(text, color, duration)
    local notification = Instance.new("ScreenGui")
    notification.Name = "AutoUpgradeNotification"
    notification.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 320, 0, 70)
    frame.Position = UDim2.new(1, -340, 0, 20)
    frame.BackgroundColor3 = color or Color3.fromRGB(50, 200, 100)
    frame.BorderSizePixel = 0
    frame.Parent = notification
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = frame
    
    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(255, 255, 255)
    stroke.Thickness = 2
    stroke.Transparency = 0.7
    stroke.Parent = frame
    
    local icon = Instance.new("TextLabel")
    icon.Size = UDim2.new(0, 50, 0, 50)
    icon.Position = UDim2.new(0, 10, 0, 10)
    icon.BackgroundTransparency = 1
    icon.Text = "⚡"
    icon.TextColor3 = Color3.fromRGB(255, 255, 255)
    icon.TextSize = 24
    icon.Font = Enum.Font.GothamBold
    icon.Parent = frame
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -70, 1, 0)
    label.Position = UDim2.new(0, 60, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.Font = Enum.Font.GothamBold
    label.TextWrapped = true
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = frame
    
    -- Animation
    frame.Position = UDim2.new(1, 0, 0, 20)
    local slideIn = TweenService:Create(frame, TweenInfo.new(0.3), {Position = UDim2.new(1, -340, 0, 20)})
    slideIn:Play()
    
    spawn(function()
        wait(duration or 4)
        local slideOut = TweenService:Create(frame, TweenInfo.new(0.3), {Position = UDim2.new(1, 0, 0, 20)})
        slideOut:Play()
        slideOut.Completed:Connect(function()
            notification:Destroy()
        end)
    end)
end

-- Dynamic Element Scanner
local function scanForUpgradeElements()
    local currentTime = tick()
    if currentTime - AutoUpgradeSystem.lastScanTime < AutoUpgradeSystem.scanInterval then
        return AutoUpgradeSystem.detectedElements
    end
    
    AutoUpgradeSystem.lastScanTime = currentTime
    
    -- Clear previous scan results
    AutoUpgradeSystem.detectedElements = {
        upgradeButtons = {},
        buildingPads = {},
        purchaseButtons = {},
        unlockButtons = {},
        remoteEvents = {},
        buildingModels = {}
    }
    
    print("🔍 Scanning for upgrade elements...")
    
    -- Scan GUI elements
    local function scanGuiElement(element, parent)
        if not element or not element.Parent then return end
        
        local elementName = element.Name:lower()
        local elementText = ""
        
        if element:IsA("TextButton") or element:IsA("TextLabel") then
            elementText = element.Text:lower()
        end
        
        -- Check for upgrade buttons
        for _, pattern in ipairs(AutoUpgradeSystem.scanPatterns.buttonTexts) do
            if elementText:find(pattern) or elementName:find(pattern) then
                local buttonData = {
                    element = element,
                    type = "upgrade",
                    text = element.Text or "",
                    name = element.Name,
                    parent = parent,
                    position = element.AbsolutePosition,
                    size = element.AbsoluteSize,
                    visible = element.Visible,
                    active = element.Active,
                    priority = 1
                }
                
                -- Determine button priority based on text
                if elementText:find("upgrade") then
                    buttonData.priority = 1
                elseif elementText:find("unlock") then
                    buttonData.priority = 2
                elseif elementText:find("buy") or elementText:find("purchase") then
                    buttonData.priority = 3
                end
                
                table.insert(AutoUpgradeSystem.detectedElements.upgradeButtons, buttonData)
                print("📱 Found upgrade button: " .. element.Name .. " - " .. (element.Text or ""))
            end
        end
        
        -- Check for button names
        for _, pattern in ipairs(AutoUpgradeSystem.scanPatterns.buttonNames) do
            if elementName:find(pattern:lower()) then
                local buttonData = {
                    element = element,
                    type = "named",
                    text = element.Text or "",
                    name = element.Name,
                    parent = parent,
                    position = element.AbsolutePosition,
                    size = element.AbsoluteSize,
                    visible = element.Visible,
                    active = element.Active,
                    priority = 2
                }
                
                table.insert(AutoUpgradeSystem.detectedElements.upgradeButtons, buttonData)
                print("📱 Found named button: " .. element.Name)
            end
        end
    end
    
    -- Scan all GUI elements
    for _, gui in pairs(playerGui:GetDescendants()) do
        if gui:IsA("TextButton") or gui:IsA("ImageButton") then
            scanGuiElement(gui, gui.Parent)
        end
    end
    
    -- Scan workspace for building pads and models
    local function scanWorkspaceElement(element)
        if not element or not element.Parent then return end
        
        local elementName = element.Name:lower()
        
        -- Check for building pads
        for _, pattern in ipairs(AutoUpgradeSystem.scanPatterns.padNames) do
            if elementName:find(pattern) then
                local padData = {
                    element = element,
                    type = "pad",
                    name = element.Name,
                    position = element.Position,
                    size = element.Size,
                    canCollide = element.CanCollide,
                    transparency = element.Transparency,
                    color = element.Color
                }
                
                table.insert(AutoUpgradeSystem.detectedElements.buildingPads, padData)
                print("🏗️ Found building pad: " .. element.Name)
            end
        end
        
        -- Check for building models
        if element:IsA("Model") then
            for _, pattern in ipairs(AutoUpgradeSystem.scanPatterns.buildingIndicators) do
                if elementName:find(pattern) then
                    local modelData = {
                        element = element,
                        type = "building",
                        name = element.Name,
                        position = element:GetModelCFrame().Position,
                        size = element:GetExtentsSize(),
                        parts = #element:GetChildren()
                    }
                    
                    table.insert(AutoUpgradeSystem.detectedElements.buildingModels, modelData)
                    print("🏢 Found building model: " .. element.Name)
                end
            end
        end
    end
    
    -- Scan workspace
    for _, element in pairs(Workspace:GetDescendants()) do
        if element:IsA("BasePart") or element:IsA("Model") then
            scanWorkspaceElement(element)
        end
    end
    
    -- Scan for remote events
    for _, remote in pairs(ReplicatedStorage:GetDescendants()) do
        if remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction") then
            local remoteName = remote.Name:lower()
            
            for _, pattern in ipairs(AutoUpgradeSystem.scanPatterns.remoteNames) do
                if remoteName:find(pattern:lower()) then
                    local remoteData = {
                        element = remote,
                        type = "remote",
                        name = remote.Name,
                        className = remote.ClassName,
                        parent = remote.Parent.Name
                    }
                    
                    table.insert(AutoUpgradeSystem.detectedElements.remoteEvents, remoteData)
                    print("📡 Found upgrade remote: " .. remote.Name)
                end
            end
        end
    end
    
    -- Sort buttons by priority
    table.sort(AutoUpgradeSystem.detectedElements.upgradeButtons, function(a, b)
        return a.priority < b.priority
    end)
    
    local totalFound = #AutoUpgradeSystem.detectedElements.upgradeButtons + 
                     #AutoUpgradeSystem.detectedElements.buildingPads + 
                     #AutoUpgradeSystem.detectedElements.remoteEvents
    
    print(string.format("✅ Scan complete! Found %d upgrade elements", totalFound))
    
    return AutoUpgradeSystem.detectedElements
end

-- Money Bypass System
local function bypassMoneyRequirement(button)
    if not AutoUpgradeSystem.bypassMethods.moneyBypass then return false end
    
    -- Method 1: Modify leaderstats
    if player:FindFirstChild("leaderstats") then
        for _, stat in pairs(player.leaderstats:GetChildren()) do
            local statName = stat.Name:lower()
            if statName:find("money") or statName:find("cash") or statName:find("coin") then
                local originalValue = stat.Value
                stat.Value = 999999999
                
                spawn(function()
                    wait(1)
                    stat.Value = originalValue
                end)
                
                print("💰 Bypassed money requirement via leaderstats")
                return true
            end
        end
    end
    
    -- Method 2: Hook remote events
    local mt = getrawmetatable(game)
    local oldNamecall = mt.__namecall
    
    setreadonly(mt, false)
    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        local args = {...}
        
        if method == "FireServer" and self.Name:lower():find("money") then
            -- Spoof money check
            return true
        end
        
        return oldNamecall(self, ...)
    end)
    setreadonly(mt, true)
    
    print("💰 Money bypass hook installed")
    return true
end

-- Advanced Button Clicking System
local function clickUpgradeButton(buttonData)
    local button = buttonData.element
    if not button or not button.Parent or not button.Visible or not button.Active then
        return false
    end
    
    print("🔄 Attempting to click: " .. button.Name)
    
    -- Bypass money requirement first
    bypassMoneyRequirement(button)
    
    local success = false
    
    -- Method 1: Direct connection firing
    if button.MouseButton1Click then
        local connections = getconnections(button.MouseButton1Click)
        for _, connection in pairs(connections) do
            spawn(function()
                connection:Fire()
            end)
            success = true
        end
    end
    
    -- Method 2: Activated event
    if button.Activated then
        local connections = getconnections(button.Activated)
        for _, connection in pairs(connections) do
            spawn(function()
                connection:Fire()
            end)
            success = true
        end
    end
    
    -- Method 3: Virtual input (for mobile support)
    if UserInputService.TouchEnabled then
        local buttonPos = button.AbsolutePosition
        local buttonSize = button.AbsoluteSize
        local clickX = buttonPos.X + buttonSize.X / 2
        local clickY = buttonPos.Y + buttonSize.Y / 2
        
        VirtualInputManager:SendMouseButtonEvent(clickX, clickY, 0, true, game, 1)
        wait(0.1)
        VirtualInputManager:SendMouseButtonEvent(clickX, clickY, 0, false, game, 1)
        success = true
    end
    
    -- Method 4: GuiService click simulation
    pcall(function()
        game:GetService("GuiService"):Click(button)
        success = true
    end)
    
    -- Method 5: Remote event firing
    for _, remoteData in pairs(AutoUpgradeSystem.detectedElements.remoteEvents) do
        local remote = remoteData.element
        if remote and remote.Parent then
            spawn(function()
                if remote:IsA("RemoteEvent") then
                    remote:FireServer(button.Name, "upgrade", true)
                elseif remote:IsA("RemoteFunction") then
                    remote:InvokeServer(button.Name, "upgrade", true)
                end
            end)
            success = true
        end
    end
    
    if success then
        print("✅ Successfully clicked: " .. button.Name)
        createNotification("⚡ Upgraded: " .. button.Name, Color3.fromRGB(100, 255, 100), 2)
    else
        print("❌ Failed to click: " .. button.Name)
    end
    
    return success
end

-- Smart Upgrade Logic
local function performSmartUpgrade()
    if not AutoUpgradeSystem.enabled then return end
    
    -- Scan for new elements
    local elements = scanForUpgradeElements()
    
    local upgradesPerformed = 0
    local maxUpgrades = AutoUpgradeSystem.maxUpgradesPerCycle
    
    -- Process upgrade buttons
    for _, buttonData in ipairs(elements.upgradeButtons) do
        if upgradesPerformed >= maxUpgrades then break end
        
        local button = buttonData.element
        if button and button.Parent and button.Visible and button.Active then
            -- Check if button is actually clickable
            local buttonText = button.Text:lower()
            
            -- Skip if button indicates insufficient funds (unless we're bypassing)
            if not AutoUpgradeSystem.bypassMethods.moneyBypass then
                if buttonText:find("insufficient") or buttonText:find("not enough") or buttonText:find("need more") then
                    continue
                end
            end
            
            -- Skip if button is on cooldown
            if not AutoUpgradeSystem.bypassMethods.cooldownBypass then
                if buttonText:find("cooldown") or buttonText:find("wait") or buttonText:find("timer") then
                    continue
                end
            end
            
            -- Attempt to click the button
            if clickUpgradeButton(buttonData) then
                upgradesPerformed = upgradesPerformed + 1
                wait(AutoUpgradeSystem.upgradeDelay)
            end
        end
    end
    
    -- Process building pads (touch to upgrade)
    for _, padData in ipairs(elements.buildingPads) do
        if upgradesPerformed >= maxUpgrades then break end
        
        local pad = padData.element
        if pad and pad.Parent and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            -- Check if pad is close enough
            local distance = (player.Character.HumanoidRootPart.Position - pad.Position).Magnitude
            if distance < 100 then
                -- Touch the pad
                firetouchinterest(player.Character.HumanoidRootPart, pad, 0)
                firetouchinterest(player.Character.HumanoidRootPart, pad, 1)
                
                print("🏗️ Touched building pad: " .. pad.Name)
                upgradesPerformed = upgradesPerformed + 1
                wait(AutoUpgradeSystem.upgradeDelay)
            end
        end
    end
    
    if upgradesPerformed > 0 then
        print(string.format("⚡ Performed %d upgrades this cycle", upgradesPerformed))
    end
end

-- Auto Upgrade Main Loop
local function startAutoUpgrade()
    if AutoUpgradeSystem.connections.mainLoop then
        AutoUpgradeSystem.connections.mainLoop:Disconnect()
    end
    
    AutoUpgradeSystem.connections.mainLoop = RunService.Heartbeat:Connect(function()
        if AutoUpgradeSystem.enabled then
            spawn(performSmartUpgrade)
        end
    end)
    
    print("🚀 Auto Upgrade system started!")
    createNotification("🚀 Auto Upgrade Started!\nDynamic scanning enabled", Color3.fromRGB(100, 255, 100), 3)
end

local function stopAutoUpgrade()
    if AutoUpgradeSystem.connections.mainLoop then
        AutoUpgradeSystem.connections.mainLoop:Disconnect()
        AutoUpgradeSystem.connections.mainLoop = nil
    end
    
    print("⏹️ Auto Upgrade system stopped!")
    createNotification("⏹️ Auto Upgrade Stopped", Color3.fromRGB(255, 100, 100), 2)
end

-- Configuration GUI
local function createConfigGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AutoUpgradeConfig"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui
    
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 400, 0, 500)
    mainFrame.Position = UDim2.new(0.5, -200, 0.5, -250)
    mainFrame.BackgroundColor3 = Color3.fromRGB(25, 30, 40)
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = true
    mainFrame.Parent = screenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 15)
    corner.Parent = mainFrame
    
    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(70, 130, 255)
    stroke.Thickness = 2
    stroke.Transparency = 0.4
    stroke.Parent = mainFrame
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -20, 0, 40)
    title.Position = UDim2.new(0, 10, 0, 10)
    title.BackgroundTransparency = 1
    title.Text = "⚡ Dynamic Auto Upgrade System"
    title.TextColor3 = Color3.fromRGB(100, 200, 255)
    title.TextSize = 18
    title.Font = Enum.Font.GothamBold
    title.Parent = mainFrame
    
    -- Main toggle
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Size = UDim2.new(1, -20, 0, 60)
    toggleFrame.Position = UDim2.new(0, 10, 0, 60)
    toggleFrame.BackgroundColor3 = Color3.fromRGB(40, 45, 55)
    toggleFrame.BorderSizePixel = 0
    toggleFrame.Parent = mainFrame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 8)
    toggleCorner.Parent = toggleFrame
    
    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Size = UDim2.new(0, 250, 1, 0)
    toggleLabel.Position = UDim2.new(0, 15, 0, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = "🚀 Auto Upgrade (Dynamic)\nUpgrade base tanpa money"
    toggleLabel.TextColor3 = Color3.fromRGB(200, 220, 255)
    toggleLabel.TextSize = 14
    toggleLabel.Font = Enum.Font.GothamBold
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Parent = toggleFrame
    
    local toggleBtn = Instance.new("TextButton")
    toggleBtn.Size = UDim2.new(0, 80, 0, 35)
    toggleBtn.Position = UDim2.new(1, -90, 0, 12)
    toggleBtn.BackgroundColor3 = Color3.fromRGB(60, 70, 80)
    toggleBtn.Text = "OFF"
    toggleBtn.TextColor3 = Color3.fromRGB(255, 100, 100)
    toggleBtn.TextSize = 14
    toggleBtn.Font = Enum.Font.GothamBold
    toggleBtn.BorderSizePixel = 0
    toggleBtn.Parent = toggleFrame
    
    local toggleBtnCorner = Instance.new("UICorner")
    toggleBtnCorner.CornerRadius = UDim.new(0, 6)
    toggleBtnCorner.Parent = toggleBtn
    
    -- Settings
    local settingsFrame = Instance.new("ScrollingFrame")
    settingsFrame.Size = UDim2.new(1, -20, 1, -140)
    settingsFrame.Position = UDim2.new(0, 10, 0, 130)
    settingsFrame.BackgroundColor3 = Color3.fromRGB(30, 35, 45)
    settingsFrame.BorderSizePixel = 0
    settingsFrame.ScrollBarThickness = 6
    settingsFrame.ScrollBarImageColor3 = Color3.fromRGB(70, 130, 255)
    settingsFrame.CanvasSize = UDim2.new(0, 0, 0, 600)
    settingsFrame.Parent = mainFrame
    
    local settingsCorner = Instance.new("UICorner")
    settingsCorner.CornerRadius = UDim.new(0, 8)
    settingsCorner.Parent = settingsFrame
    
    local layout = Instance.new("UIListLayout")
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, 10)
    layout.Parent = settingsFrame
    
    -- Create setting toggles
    local function createSettingToggle(name, description, setting, layoutOrder)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, -20, 0, 50)
        frame.BackgroundColor3 = Color3.fromRGB(40, 45, 55)
        frame.BorderSizePixel = 0
        frame.LayoutOrder = layoutOrder
        frame.Parent = settingsFrame
        
        local frameCorner = Instance.new("UICorner")
        frameCorner.CornerRadius = UDim.new(0, 6)
        frameCorner.Parent = frame
        
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0, 200, 1, 0)
        label.Position = UDim2.new(0, 10, 0, 0)
        label.BackgroundTransparency = 1
        label.Text = name .. "\n" .. description
        label.TextColor3 = Color3.fromRGB(200, 220, 255)
        label.TextSize = 11
        label.Font = Enum.Font.Gotham
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = frame
        
        local toggle = Instance.new("TextButton")
        toggle.Size = UDim2.new(0, 60, 0, 25)
        toggle.Position = UDim2.new(1, -70, 0, 12)
        toggle.BackgroundColor3 = AutoUpgradeSystem.bypassMethods[setting] and Color3.fromRGB(50, 120, 50) or Color3.fromRGB(60, 70, 80)
        toggle.Text = AutoUpgradeSystem.bypassMethods[setting] and "ON" or "OFF"
        toggle.TextColor3 = AutoUpgradeSystem.bypassMethods[setting] and Color3.fromRGB(100, 255, 100) or Color3.fromRGB(255, 100, 100)
        toggle.TextSize = 10
        toggle.Font = Enum.Font.GothamBold
        toggle.BorderSizePixel = 0
        toggle.Parent = frame
        
        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 4)
        toggleCorner.Parent = toggle
        
        toggle.MouseButton1Click:Connect(function()
            AutoUpgradeSystem.bypassMethods[setting] = not AutoUpgradeSystem.bypassMethods[setting]
            toggle.BackgroundColor3 = AutoUpgradeSystem.bypassMethods[setting] and Color3.fromRGB(50, 120, 50) or Color3.fromRGB(60, 70, 80)
            toggle.Text = AutoUpgradeSystem.bypassMethods[setting] and "ON" or "OFF"
            toggle.TextColor3 = AutoUpgradeSystem.bypassMethods[setting] and Color3.fromRGB(100, 255, 100) or Color3.fromRGB(255, 100, 100)
        end)
    end
    
    createSettingToggle("💰 Money Bypass", "Bypass money requirements", "moneyBypass", 1)
    createSettingToggle("📋 Requirement Bypass", "Bypass level/unlock requirements", "requirementBypass", 2)
    createSettingToggle("⏰ Cooldown Bypass", "Bypass upgrade cooldowns", "cooldownBypass", 3)
    createSettingToggle("🎯 Level Bypass", "Bypass level restrictions", "levelBypass", 4)
    
    -- Statistics
    local statsFrame = Instance.new("Frame")
    statsFrame.Size = UDim2.new(1, -20, 0, 100)
    statsFrame.BackgroundColor3 = Color3.fromRGB(40, 45, 55)
    statsFrame.BorderSizePixel = 0
    statsFrame.LayoutOrder = 5
    statsFrame.Parent = settingsFrame
    
    local statsCorner = Instance.new("UICorner")
    statsCorner.CornerRadius = UDim.new(0, 6)
    statsCorner.Parent = statsFrame
    
    local statsLabel = Instance.new("TextLabel")
    statsLabel.Size = UDim2.new(1, -20, 1, 0)
    statsLabel.Position = UDim2.new(0, 10, 0, 0)
    statsLabel.BackgroundTransparency = 1
    statsLabel.Text = "📊 Statistics\nButtons: 0 | Pads: 0 | Remotes: 0\nLast Scan: Never"
    statsLabel.TextColor3 = Color3.fromRGB(150, 170, 190)
    statsLabel.TextSize = 12
    statsLabel.Font = Enum.Font.Gotham
    statsLabel.TextXAlignment = Enum.TextXAlignment.Left
    statsLabel.Parent = statsFrame
    
    -- Update stats
    local function updateStats()
        local elements = AutoUpgradeSystem.detectedElements
        local buttonCount = #elements.upgradeButtons
        local padCount = #elements.buildingPads
        local remoteCount = #elements.remoteEvents
        local lastScan = AutoUpgradeSystem.lastScanTime > 0 and os.date("%H:%M:%S", AutoUpgradeSystem.lastScanTime) or "Never"
        
        statsLabel.Text = string.format("📊 Statistics\nButtons: %d | Pads: %d | Remotes: %d\nLast Scan: %s", 
                                       buttonCount, padCount, remoteCount, lastScan)
    end
    
    -- Main toggle functionality
    toggleBtn.MouseButton1Click:Connect(function()
        AutoUpgradeSystem.enabled = not AutoUpgradeSystem.enabled
        
        if AutoUpgradeSystem.enabled then
            toggleBtn.Text = "ON"
            toggleBtn.TextColor3 = Color3.fromRGB(100, 255, 100)
            toggleBtn.BackgroundColor3 = Color3.fromRGB(50, 120, 50)
            startAutoUpgrade()
        else
            toggleBtn.Text = "OFF"
            toggleBtn.TextColor3 = Color3.fromRGB(255, 100, 100)
            toggleBtn.BackgroundColor3 = Color3.fromRGB(60, 70, 80)
            stopAutoUpgrade()
        end
    end)
    
    -- Update stats every 3 seconds
    spawn(function()
        while screenGui.Parent do
            updateStats()
            wait(3)
        end
    end)
    
    -- Close button
    local closeBtn = Instance.new("TextButton")
    closeBtn.Size = UDim2.new(0, 30, 0, 25)
    closeBtn.Position = UDim2.new(1, -40, 0, 10)
    closeBtn.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    closeBtn.Text = "×"
    closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeBtn.TextSize = 16
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.BorderSizePixel = 0
    closeBtn.Parent = mainFrame
    
    local closeBtnCorner = Instance.new("UICorner")
    closeBtnCorner.CornerRadius = UDim.new(0, 3)
    closeBtnCorner.Parent = closeBtn
    
    closeBtn.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)
    
    return screenGui
end

-- Initialize system
local function initialize()
    print("🚀 Initializing Dynamic Auto Upgrade System...")
    
    -- Initial scan
    scanForUpgradeElements()
    
    -- Create GUI
    createConfigGUI()
    
    createNotification("⚡ Dynamic Auto Upgrade System Loaded!\nNo static data - Full dynamic detection", Color3.fromRGB(100, 200, 255), 4)
    
    print("✅ Dynamic Auto Upgrade System ready!")
    print("📋 Features:")
    print("   • Dynamic element detection")
    print("   • Money bypass system")
    print("   • Smart upgrade logic")
    print("   • Mobile support")
    print("   • No static data used")
    print("   • Real-time scanning")
end

-- Keyboard shortcut
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.F1 then
        if playerGui:FindFirstChild("AutoUpgradeConfig") then
            playerGui.AutoUpgradeConfig:Destroy()
        else
            createConfigGUI()
        end
    end
end)

-- Auto-reconnect on character respawn
player.CharacterAdded:Connect(function()
    wait(3) -- Wait for character to fully load
    scanForUpgradeElements() -- Rescan elements
    createNotification("🔄 Auto Upgrade system reconnected", Color3.fromRGB(100, 200, 255), 2)
end)

-- Initialize
initialize()
