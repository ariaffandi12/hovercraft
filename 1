-- [Hovercrafts] War Tycoon - Optimized Dynamic Auto Upgrade System
-- Anti-lag, Anti-delay, Mobile optimized dengan minimize feature

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local GuiService = game:GetService("GuiService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Detect platform
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
local isPC = UserInputService.KeyboardEnabled

-- Performance Optimization System
local PerformanceManager = {
    frameRate = 60,
    targetFPS = isMobile and 30 or 60,
    lastFrameTime = 0,
    frameSkipCount = 0,
    maxFrameSkip = isMobile and 3 or 1,
    renderStepped = false,
    optimizationLevel = isMobile and 3 or 1, -- 1=Low, 2=Medium, 3=High
    memoryThreshold = isMobile and 50 or 100, -- MB
    lastMemoryCheck = 0,
    memoryCheckInterval = 5,
    lagDetectionThreshold = isMobile and 100 or 50, -- ms
    antiLagEnabled = true,
    smoothAnimations = true
}

-- Anti-Lag System
local AntiLagSystem = {
    enabled = true,
    connections = {},
    optimizations = {
        reduceParticles = true,
        disableUnnecessaryEffects = true,
        optimizeRendering = true,
        limitConcurrentOperations = true,
        useFrameSkipping = true,
        enableMemoryManagement = true
    },
    performanceStats = {
        avgFPS = 60,
        memoryUsage = 0,
        lagSpikes = 0,
        optimizationsApplied = 0
    }
}

-- Dynamic Auto Upgrade System (Optimized)
local AutoUpgradeSystem = {
    enabled = false,
    connections = {},
    detectedElements = {
        upgradeButtons = {},
        buildingPads = {},
        purchaseButtons = {},
        unlockButtons = {},
        remoteEvents = {},
        buildingModels = {}
    },
    scanPatterns = {
        buttonTexts = {
            "upgrade", "buy", "purchase", "unlock", "build", "construct", 
            "improve", "enhance", "level up", "advance", "develop",
            "expand", "install", "activate", "enable", "acquire"
        },
        buttonNames = {
            "UpgradeButton", "BuyButton", "PurchaseButton", "UnlockButton",
            "BuildButton", "ConstructButton", "InstallButton", "ActivateButton"
        },
        remoteNames = {
            "Upgrade", "Buy", "Purchase", "Unlock", "Build", "Construct",
            "Install", "Activate", "BuyItem", "PurchaseItem", "UnlockItem"
        },
        padNames = {
            "Pad", "Platform", "Foundation", "Base", "Plot", "Spot",
            "Area", "Zone", "Space", "Location", "Position"
        },
        buildingIndicators = {
            "Building", "Structure", "Facility", "Unit", "Tower", "Factory",
            "Generator", "Producer", "Collector", "Processor", "Station"
        }
    },
    bypassMethods = {
        moneyBypass = true,
        requirementBypass = true,
        cooldownBypass = true,
        levelBypass = true
    },
    upgradeQueue = {},
    lastScanTime = 0,
    scanInterval = isMobile and 3 or 2, -- Longer interval on mobile
    upgradeDelay = isMobile and 0.8 or 0.5, -- Longer delay on mobile
    maxUpgradesPerCycle = isMobile and 5 or 10, -- Fewer upgrades on mobile
    batchSize = isMobile and 2 or 5, -- Process fewer items per batch on mobile
    asyncProcessing = true
}

-- Performance Monitoring
local function getMemoryUsage()
    return game:GetService("Stats"):GetTotalMemoryUsageMb()
end

local function getFPS()
    return math.floor(1 / RunService.Heartbeat:Wait())
end

local function detectLag()
    local currentTime = tick()
    local deltaTime = currentTime - PerformanceManager.lastFrameTime
    PerformanceManager.lastFrameTime = currentTime
    
    if deltaTime > PerformanceManager.lagDetectionThreshold / 1000 then
        AntiLagSystem.performanceStats.lagSpikes = AntiLagSystem.performanceStats.lagSpikes + 1
        return true
    end
    return false
end

-- Anti-Lag Optimizations
local function applyAntiLagOptimizations()
    if not AntiLagSystem.enabled then return end
    
    -- Reduce graphics quality on mobile
    if isMobile then
        settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
        settings().Rendering.MeshPartDetailLevel = Enum.MeshPartDetailLevel.Level01
        settings().Rendering.MaterialQualityLevel = Enum.MaterialQualityLevel.Level01
    end
    
    -- Disable unnecessary effects
    if AntiLagSystem.optimizations.reduceParticles then
        for _, effect in pairs(Workspace:GetDescendants()) do
            if effect:IsA("ParticleEmitter") or effect:IsA("Fire") or effect:IsA("Smoke") then
                effect.Enabled = false
            end
        end
    end
    
    -- Optimize rendering
    if AntiLagSystem.optimizations.optimizeRendering then
        game:GetService("Lighting").GlobalShadows = false
        game:GetService("Lighting").FogEnd = 100
        game:GetService("Lighting").Brightness = 1
    end
    
    AntiLagSystem.performanceStats.optimizationsApplied = AntiLagSystem.performanceStats.optimizationsApplied + 1
    print("🚀 Anti-lag optimizations applied")
end

-- Memory Management
local function performMemoryCleanup()
    local currentTime = tick()
    if currentTime - PerformanceManager.lastMemoryCheck < PerformanceManager.memoryCheckInterval then
        return
    end
    
    PerformanceManager.lastMemoryCheck = currentTime
    local memoryUsage = getMemoryUsage()
    AntiLagSystem.performanceStats.memoryUsage = memoryUsage
    
    if memoryUsage > PerformanceManager.memoryThreshold then
        -- Force garbage collection
        game:GetService("RunService").Heartbeat:Wait()
        
        -- Clean up old notifications
        for _, gui in pairs(playerGui:GetChildren()) do
            if gui.Name:find("Notification") and gui.Name ~= "AutoUpgradeNotification" then
                gui:Destroy()
            end
        end
        
        print("🧹 Memory cleanup performed: " .. math.floor(memoryUsage) .. "MB")
    end
end

-- Smooth Animation System
local function createSmoothTween(object, properties, duration, easingStyle)
    if not PerformanceManager.smoothAnimations then
        -- Instant change for performance
        for prop, value in pairs(properties) do
            object[prop] = value
        end
        return
    end
    
    local tweenInfo = TweenInfo.new(
        duration or 0.3,
        easingStyle or Enum.EasingStyle.Quart,
        Enum.EasingDirection.Out
    )
    
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

-- Enhanced Notification System (Optimized)
local notificationQueue = {}
local maxNotifications = isMobile and 2 or 3
local activeNotifications = 0

local function createOptimizedNotification(text, color, duration)
    -- Limit notifications to prevent lag
    if activeNotifications >= maxNotifications then
        table.insert(notificationQueue, {text = text, color = color, duration = duration})
        return
    end
    
    activeNotifications = activeNotifications + 1
    
    local notification = Instance.new("ScreenGui")
    notification.Name = "AutoUpgradeNotification"
    notification.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Size = isMobile and UDim2.new(0, 280, 0, 60) or UDim2.new(0, 320, 0, 70)
    frame.Position = UDim2.new(1, -340, 0, 20 + (activeNotifications - 1) * 80)
    frame.BackgroundColor3 = color or Color3.fromRGB(50, 200, 100)
    frame.BorderSizePixel = 0
    frame.Parent = notification
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, isMobile and 8 or 12)
    corner.Parent = frame
    
    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(255, 255, 255)
    stroke.Thickness = isMobile and 1 or 2
    stroke.Transparency = 0.7
    stroke.Parent = frame
    
    local icon = Instance.new("TextLabel")
    icon.Size = UDim2.new(0, isMobile and 40 or 50, 0, isMobile and 40 or 50)
    icon.Position = UDim2.new(0, 10, 0, 10)
    icon.BackgroundTransparency = 1
    icon.Text = "⚡"
    icon.TextColor3 = Color3.fromRGB(255, 255, 255)
    icon.TextSize = isMobile and 20 or 24
    icon.Font = Enum.Font.GothamBold
    icon.Parent = frame
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, isMobile and -60 or -70, 1, 0)
    label.Position = UDim2.new(0, isMobile and 50 or 60, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = isMobile and 11 or 14
    label.Font = Enum.Font.GothamBold
    label.TextWrapped = true
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextScaled = isMobile
    label.Parent = frame
    
    -- Smooth animation
    frame.Position = UDim2.new(1, 0, 0, 20 + (activeNotifications - 1) * 80)
    createSmoothTween(frame, {Position = UDim2.new(1, -340, 0, 20 + (activeNotifications - 1) * 80)}, 0.3)
    
    -- Auto remove
    spawn(function()
        wait(duration or 3)
        createSmoothTween(frame, {Position = UDim2.new(1, 0, 0, 20 + (activeNotifications - 1) * 80)}, 0.3)
        wait(0.3)
        notification:Destroy()
        activeNotifications = activeNotifications - 1
        
        -- Process queued notifications
        if #notificationQueue > 0 then
            local queued = table.remove(notificationQueue, 1)
            createOptimizedNotification(queued.text, queued.color, queued.duration)
        end
    end)
end

-- Optimized Element Scanner with Batching
local function scanForUpgradeElementsOptimized()
    local currentTime = tick()
    if currentTime - AutoUpgradeSystem.lastScanTime < AutoUpgradeSystem.scanInterval then
        return AutoUpgradeSystem.detectedElements
    end
    
    AutoUpgradeSystem.lastScanTime = currentTime
    
    -- Clear previous scan results
    AutoUpgradeSystem.detectedElements = {
        upgradeButtons = {},
        buildingPads = {},
        purchaseButtons = {},
        unlockButtons = {},
        remoteEvents = {},
        buildingModels = {}
    }
    
    print("🔍 Optimized scanning for upgrade elements...")
    
    -- Batch processing to prevent lag
    local function processBatch(items, processor, batchSize)
        batchSize = batchSize or AutoUpgradeSystem.batchSize
        local processed = 0
        
        for i, item in ipairs(items) do
            processor(item)
            processed = processed + 1
            
            -- Yield every batch to prevent lag
            if processed >= batchSize then
                if AutoUpgradeSystem.asyncProcessing then
                    RunService.Heartbeat:Wait()
                end
                processed = 0
            end
        end
    end
    
    -- Optimized GUI scanning
    local guiElements = {}
    for _, gui in pairs(playerGui:GetDescendants()) do
        if gui:IsA("TextButton") or gui:IsA("ImageButton") then
            table.insert(guiElements, gui)
        end
    end
    
    processBatch(guiElements, function(element)
        local elementName = element.Name:lower()
        local elementText = element.Text and element.Text:lower() or ""
        
        -- Quick pattern matching
        for _, pattern in ipairs(AutoUpgradeSystem.scanPatterns.buttonTexts) do
            if elementText:find(pattern) or elementName:find(pattern) then
                local buttonData = {
                    element = element,
                    type = "upgrade",
                    text = element.Text or "",
                    name = element.Name,
                    parent = element.Parent,
                    visible = element.Visible,
                    active = element.Active,
                    priority = elementText:find("upgrade") and 1 or (elementText:find("unlock") and 2 or 3)
                }
                
                table.insert(AutoUpgradeSystem.detectedElements.upgradeButtons, buttonData)
                break
            end
        end
    end)
    
    -- Optimized workspace scanning (limited scope)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local playerPos = player.Character.HumanoidRootPart.Position
        local scanRadius = isMobile and 200 or 500 -- Smaller radius on mobile
        
        local nearbyParts = {}
        for _, part in pairs(Workspace:GetPartBoundsInBox(CFrame.new(playerPos), Vector3.new(scanRadius, scanRadius, scanRadius))) do
            if part.Parent ~= player.Character then
                table.insert(nearbyParts, part)
            end
        end
        
        processBatch(nearbyParts, function(part)
            local partName = part.Name:lower()
            
            for _, pattern in ipairs(AutoUpgradeSystem.scanPatterns.padNames) do
                if partName:find(pattern) then
                    local padData = {
                        element = part,
                        type = "pad",
                        name = part.Name,
                        position = part.Position,
                        distance = (playerPos - part.Position).Magnitude
                    }
                    
                    table.insert(AutoUpgradeSystem.detectedElements.buildingPads, padData)
                    break
                end
            end
        end)
    end
    
    -- Quick remote scanning
    local remotes = {}
    for _, remote in pairs(ReplicatedStorage:GetDescendants()) do
        if remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction") then
            table.insert(remotes, remote)
        end
    end
    
    processBatch(remotes, function(remote)
        local remoteName = remote.Name:lower()
        
        for _, pattern in ipairs(AutoUpgradeSystem.scanPatterns.remoteNames) do
            if remoteName:find(pattern:lower()) then
                local remoteData = {
                    element = remote,
                    type = "remote",
                    name = remote.Name,
                    className = remote.ClassName
                }
                
                table.insert(AutoUpgradeSystem.detectedElements.remoteEvents, remoteData)
                break
            end
        end
    end)
    
    -- Sort by priority
    table.sort(AutoUpgradeSystem.detectedElements.upgradeButtons, function(a, b)
        return a.priority < b.priority
    end)
    
    local totalFound = #AutoUpgradeSystem.detectedElements.upgradeButtons + 
                     #AutoUpgradeSystem.detectedElements.buildingPads + 
                     #AutoUpgradeSystem.detectedElements.remoteEvents
    
    print(string.format("✅ Optimized scan complete! Found %d elements", totalFound))
    
    return AutoUpgradeSystem.detectedElements
end

-- Optimized Money Bypass
local function bypassMoneyRequirementOptimized(button)
    if not AutoUpgradeSystem.bypassMethods.moneyBypass then return false end
    
    -- Quick leaderstats modification
    spawn(function()
        if player:FindFirstChild("leaderstats") then
            for _, stat in pairs(player.leaderstats:GetChildren()) do
                local statName = stat.Name:lower()
                if statName:find("money") or statName:find("cash") or statName:find("coin") then
                    local originalValue = stat.Value
                    stat.Value = 999999999
                    
                    wait(0.5) -- Shorter wait time
                    stat.Value = originalValue
                    break
                end
            end
        end
    end)
    
    return true
end

-- Optimized Button Clicking
local function clickUpgradeButtonOptimized(buttonData)
    local button = buttonData.element
    if not button or not button.Parent or not button.Visible or not button.Active then
        return false
    end
    
    -- Quick bypass
    bypassMoneyRequirementOptimized(button)
    
    local success = false
    
    -- Prioritized clicking methods (fastest first)
    spawn(function()
        -- Method 1: Direct connection firing (fastest)
        if button.MouseButton1Click then
            local connections = getconnections(button.MouseButton1Click)
            for _, connection in pairs(connections) do
                connection:Fire()
                success = true
                break -- Only fire first connection for speed
            end
        end
        
        -- Method 2: Virtual input for mobile
        if not success and isMobile then
            local buttonPos = button.AbsolutePosition
            local buttonSize = button.AbsoluteSize
            local clickX = buttonPos.X + buttonSize.X / 2
            local clickY = buttonPos.Y + buttonSize.Y / 2
            
            VirtualInputManager:SendMouseButtonEvent(clickX, clickY, 0, true, game, 1)
            VirtualInputManager:SendMouseButtonEvent(clickX, clickY, 0, false, game, 1)
            success = true
        end
    end)
    
    if success then
        createOptimizedNotification("⚡ " .. button.Name, Color3.fromRGB(100, 255, 100), 1.5)
    end
    
    return success
end

-- Optimized Smart Upgrade
local function performSmartUpgradeOptimized()
    if not AutoUpgradeSystem.enabled then return end
    
    -- Performance check
    if detectLag() and AntiLagSystem.enabled then
        print("⚠️ Lag detected, skipping upgrade cycle")
        return
    end
    
    local elements = scanForUpgradeElementsOptimized()
    local upgradesPerformed = 0
    local maxUpgrades = AutoUpgradeSystem.maxUpgradesPerCycle
    
    -- Process upgrades in batches
    for i, buttonData in ipairs(elements.upgradeButtons) do
        if upgradesPerformed >= maxUpgrades then break end
        
        local button = buttonData.element
        if button and button.Parent and button.Visible and button.Active then
            if clickUpgradeButtonOptimized(buttonData) then
                upgradesPerformed = upgradesPerformed + 1
                
                -- Dynamic delay based on performance
                local delay = AutoUpgradeSystem.upgradeDelay
                if AntiLagSystem.performanceStats.avgFPS < 20 then
                    delay = delay * 2 -- Longer delay if FPS is low
                end
                
                wait(delay)
            end
        end
        
        -- Yield every few iterations to prevent lag
        if i % AutoUpgradeSystem.batchSize == 0 then
            RunService.Heartbeat:Wait()
        end
    end
    
    -- Memory cleanup after upgrades
    if upgradesPerformed > 0 then
        performMemoryCleanup()
    end
end

-- Mobile-Optimized GUI with Minimize Feature
local function createOptimizedGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AutoUpgradeOptimized"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui
    
    -- Responsive sizing
    local guiSize = isMobile and UDim2.new(0, 320, 0, 450) or UDim2.new(0, 400, 0, 500)
    local guiPosition = isMobile and UDim2.new(0, 10, 0, 50) or UDim2.new(0.5, -200, 0.5, -250)
    
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = guiSize
    mainFrame.Position = guiPosition
    mainFrame.BackgroundColor3 = Color3.fromRGB(25, 30, 40)
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = not isMobile -- Disable drag on mobile for performance
    mainFrame.Parent = screenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, isMobile and 12 or 15)
    corner.Parent = mainFrame
    
    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(70, 130, 255)
    stroke.Thickness = isMobile and 1 or 2
    stroke.Transparency = 0.4
    stroke.Parent = mainFrame
    
    -- Optimized Title Bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, isMobile and 35 or 40)
    titleBar.BackgroundColor3 = Color3.fromRGB(35, 40, 50)
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, isMobile and 12 or 15)
    titleCorner.Parent = titleBar
    
    local titleExt = Instance.new("Frame")
    titleExt.Size = UDim2.new(1, 0, 0, 15)
    titleExt.Position = UDim2.new(0, 0, 1, -15)
    titleExt.BackgroundColor3 = Color3.fromRGB(35, 40, 50)
    titleExt.BorderSizePixel = 0
    titleExt.Parent = titleBar
    
    -- Animated title with performance icon
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -120, 1, 0)
    titleLabel.Position = UDim2.new(0, 15, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "⚡ Auto Upgrade " .. (isMobile and "📱" or "💻")
    titleLabel.TextColor3 = Color3.fromRGB(100, 200, 255)
    titleLabel.TextSize = isMobile and 11 or 14
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.TextScaled = isMobile
    titleLabel.Parent = titleBar
    
    -- Performance indicator
    local perfIndicator = Instance.new("TextLabel")
    perfIndicator.Size = UDim2.new(0, 40, 1, 0)
    perfIndicator.Position = UDim2.new(1, -110, 0, 0)
    perfIndicator.BackgroundTransparency = 1
    perfIndicator.Text = "🟢"
    perfIndicator.TextColor3 = Color3.fromRGB(100, 255, 100)
    perfIndicator.TextSize = isMobile and 12 or 16
    perfIndicator.Font = Enum.Font.Gotham
    perfIndicator.Parent = titleBar
    
    -- Minimize Button
    local minimizeBtn = Instance.new("TextButton")
    minimizeBtn.Name = "MinimizeButton"
    minimizeBtn.Size = UDim2.new(0, isMobile and 25 or 30, 0, isMobile and 20 or 25)
    minimizeBtn.Position = UDim2.new(1, isMobile and -65 or -70, 0, isMobile and 7 or 7)
    minimizeBtn.BackgroundColor3 = Color3.fromRGB(200, 150, 50)
    minimizeBtn.Text = "−"
    minimizeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    minimizeBtn.TextSize = isMobile and 14 or 16
    minimizeBtn.Font = Enum.Font.GothamBold
    minimizeBtn.BorderSizePixel = 0
    minimizeBtn.Parent = titleBar
    
    local minimizeBtnCorner = Instance.new("UICorner")
    minimizeBtnCorner.CornerRadius = UDim.new(0, 3)
    minimizeBtnCorner.Parent = minimizeBtn
    
    -- Close Button
    local closeBtn = Instance.new("TextButton")
    closeBtn.Name = "CloseButton"
    closeBtn.Size = UDim2.new(0, isMobile and 25 or 30, 0, isMobile and 20 or 25)
    closeBtn.Position = UDim2.new(1, isMobile and -35 or -35, 0, isMobile and 7 or 7)
    closeBtn.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    closeBtn.Text = "×"
    closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeBtn.TextSize = isMobile and 14 or 16
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.BorderSizePixel = 0
    closeBtn.Parent = titleBar
    
    local closeBtnCorner = Instance.new("UICorner")
    closeBtnCorner.CornerRadius = UDim.new(0, 3)
    closeBtnCorner.Parent = closeBtn
    
    -- Content Frame (for minimize functionality)
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "ContentFrame"
    contentFrame.Size = UDim2.new(1, 0, 1, isMobile and -35 or -40)
    contentFrame.Position = UDim2.new(0, 0, 0, isMobile and 35 or 40)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame
    
    -- Main Toggle (Optimized)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Size = UDim2.new(1, -20, 0, isMobile and 50 or 60)
    toggleFrame.Position = UDim2.new(0, 10, 0, 10)
    toggleFrame.BackgroundColor3 = Color3.fromRGB(40, 45, 55)
    toggleFrame.BorderSizePixel = 0
    toggleFrame.Parent = contentFrame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 8)
    toggleCorner.Parent = toggleFrame
    
    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Size = UDim2.new(0, isMobile and 180 or 250, 1, 0)
    toggleLabel.Position = UDim2.new(0, 15, 0, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = "🚀 Auto Upgrade (Optimized)\n" .. (isMobile and "Mobile Mode" or "PC Mode") .. " • Anti-Lag"
    toggleLabel.TextColor3 = Color3.fromRGB(200, 220, 255)
    toggleLabel.TextSize = isMobile and 10 or 12
    toggleLabel.Font = Enum.Font.GothamBold
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.TextScaled = isMobile
    toggleLabel.Parent = toggleFrame
    
    local toggleBtn = Instance.new("TextButton")
    toggleBtn.Size = UDim2.new(0, isMobile and 60 or 80, 0, isMobile and 25 or 35)
    toggleBtn.Position = UDim2.new(1, isMobile and -70 or -90, 0, isMobile and 12 or 12)
    toggleBtn.BackgroundColor3 = Color3.fromRGB(60, 70, 80)
    toggleBtn.Text = "OFF"
    toggleBtn.TextColor3 = Color3.fromRGB(255, 100, 100)
    toggleBtn.TextSize = isMobile and 10 or 12
    toggleBtn.Font = Enum.Font.GothamBold
    toggleBtn.BorderSizePixel = 0
    toggleBtn.Parent = toggleFrame
    
    local toggleBtnCorner = Instance.new("UICorner")
    toggleBtnCorner.CornerRadius = UDim.new(0, 6)
    toggleBtnCorner.Parent = toggleBtn
    
    -- Performance Stats
    local statsFrame = Instance.new("Frame")
    statsFrame.Size = UDim2.new(1, -20, 0, isMobile and 60 or 80)
    statsFrame.Position = UDim2.new(0, 10, 0, isMobile and 70 or 80)
    statsFrame.BackgroundColor3 = Color3.fromRGB(30, 35, 45)
    statsFrame.BorderSizePixel = 0
    statsFrame.Parent = contentFrame
    
    local statsCorner = Instance.new("UICorner")
    statsCorner.CornerRadius = UDim.new(0, 8)
    statsCorner.Parent = statsFrame
    
    local statsLabel = Instance.new("TextLabel")
    statsLabel.Size = UDim2.new(1, -20, 1, 0)
    statsLabel.Position = UDim2.new(0, 10, 0, 0)
    statsLabel.BackgroundTransparency = 1
    statsLabel.Text = "📊 Performance Stats\nFPS: 60 | Memory: 0MB | Lag Spikes: 0\nOptimizations: 0 | Status: Ready"
    statsLabel.TextColor3 = Color3.fromRGB(150, 170, 190)
    statsLabel.TextSize = isMobile and 8 or 10
    statsLabel.Font = Enum.Font.Gotham
    statsLabel.TextXAlignment = Enum.TextXAlignment.Left
    statsLabel.TextScaled = isMobile
    statsLabel.Parent = statsFrame
    
    -- Settings Scroll Frame (Optimized)
    local settingsFrame = Instance.new("ScrollingFrame")
    settingsFrame.Size = UDim2.new(1, -20, 1, isMobile and -150 or -170)
    settingsFrame.Position = UDim2.new(0, 10, 0, isMobile and 140 or 170)
    settingsFrame.BackgroundColor3 = Color3.fromRGB(30, 35, 45)
    settingsFrame.BorderSizePixel = 0
    settingsFrame.ScrollBarThickness = isMobile and 3 or 6
    settingsFrame.ScrollBarImageColor3 = Color3.fromRGB(70, 130, 255)
    settingsFrame.CanvasSize = UDim2.new(0, 0, 0, isMobile and 400 or 500)
    settingsFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    settingsFrame.Parent = contentFrame
    
    local settingsCorner = Instance.new("UICorner")
    settingsCorner.CornerRadius = UDim.new(0, 8)
    settingsCorner.Parent = settingsFrame
    
    local layout = Instance.new("UIListLayout")
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, isMobile and 6 or 8)
    layout.Parent = settingsFrame
    
    -- Optimized Setting Toggle Creation
    local function createOptimizedToggle(name, description, setting, layoutOrder, callback)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, -20, 0, isMobile and 40 or 45)
        frame.BackgroundColor3 = Color3.fromRGB(40, 45, 55)
        frame.BorderSizePixel = 0
        frame.LayoutOrder = layoutOrder
        frame.Parent = settingsFrame
        
        local frameCorner = Instance.new("UICorner")
        frameCorner.CornerRadius = UDim.new(0, 6)
        frameCorner.Parent = frame
        
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0, isMobile and 160 or 200, 1, 0)
        label.Position = UDim2.new(0, 10, 0, 0)
        label.BackgroundTransparency = 1
        label.Text = name .. (isMobile and "" or "\n" .. description)
        label.TextColor3 = Color3.fromRGB(200, 220, 255)
        label.TextSize = isMobile and 9 or 11
        label.Font = Enum.Font.Gotham
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.TextScaled = isMobile
        label.Parent = frame
        
        local toggle = Instance.new("TextButton")
        toggle.Size = UDim2.new(0, isMobile and 45 or 60, 0, isMobile and 20 or 25)
        toggle.Position = UDim2.new(1, isMobile and -55 or -70, 0, isMobile and 10 or 10)
        toggle.BackgroundColor3 = (setting and AutoUpgradeSystem.bypassMethods[setting] or false) and Color3.fromRGB(50, 120, 50) or Color3.fromRGB(60, 70, 80)
        toggle.Text = (setting and AutoUpgradeSystem.bypassMethods[setting] or false) and "ON" or "OFF"
        toggle.TextColor3 = (setting and AutoUpgradeSystem.bypassMethods[setting] or false) and Color3.fromRGB(100, 255, 100) or Color3.fromRGB(255, 100, 100)
        toggle.TextSize = isMobile and 8 or 10
        toggle.Font = Enum.Font.GothamBold
        toggle.BorderSizePixel = 0
        toggle.Parent = frame
        
        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 4)
        toggleCorner.Parent = toggle
        
        toggle.MouseButton1Click:Connect(function()
            if setting then
                AutoUpgradeSystem.bypassMethods[setting] = not AutoUpgradeSystem.bypassMethods[setting]
                local isEnabled = AutoUpgradeSystem.bypassMethods[setting]
                
                createSmoothTween(toggle, {
                    BackgroundColor3 = isEnabled and Color3.fromRGB(50, 120, 50) or Color3.fromRGB(60, 70, 80)
                }, 0.2)
                
                toggle.Text = isEnabled and "ON" or "OFF"
                toggle.TextColor3 = isEnabled and Color3.fromRGB(100, 255, 100) or Color3.fromRGB(255, 100, 100)
            end
            
            if callback then callback() end
        end)
        
        -- Touch support for mobile
        if isMobile then
            toggle.TouchTap:Connect(function()
                toggle.MouseButton1Click:Fire()
            end)
        end
        
        return toggle
    end
    
    -- Create optimized toggles
    createOptimizedToggle("💰 Money Bypass", "Bypass money requirements", "moneyBypass", 1)
    createOptimizedToggle("📋 Requirement Bypass", "Bypass level/unlock requirements", "requirementBypass", 2)
    createOptimizedToggle("⏰ Cooldown Bypass", "Bypass upgrade cooldowns", "cooldownBypass", 3)
    createOptimizedToggle("🎯 Level Bypass", "Bypass level restrictions", "levelBypass", 4)
    
    -- Anti-lag toggles
    createOptimizedToggle("🚀 Anti-Lag System", "Enable performance optimizations", nil, 5, function()
        AntiLagSystem.enabled = not AntiLagSystem.enabled
        if AntiLagSystem.enabled then
            applyAntiLagOptimizations()
            createOptimizedNotification("🚀 Anti-Lag Enabled", Color3.fromRGB(100, 255, 100), 2)
        else
            createOptimizedNotification("🚀 Anti-Lag Disabled", Color3.fromRGB(255, 100, 100), 2)
        end
    end)
    
    createOptimizedToggle("✨ Smooth Animations", "Enable smooth GUI animations", nil, 6, function()
        PerformanceManager.smoothAnimations = not PerformanceManager.smoothAnimations
        createOptimizedNotification("✨ Animations " .. (PerformanceManager.smoothAnimations and "Enabled" or "Disabled"), 
                                   Color3.fromRGB(100, 200, 255), 2)
    end)
    
    -- Minimize functionality
    local isMinimized = false
    local originalSize = mainFrame.Size
    local minimizedSize = UDim2.new(originalSize.X.Scale, originalSize.X.Offset, 0, isMobile and 35 or 40)
    
    minimizeBtn.MouseButton1Click:Connect(function()
        isMinimized = not isMinimized
        
        if isMinimized then
            createSmoothTween(mainFrame, {Size = minimizedSize}, 0.3)
            contentFrame.Visible = false
            minimizeBtn.Text = "+"
            titleLabel.Text = "⚡ Auto Upgrade (Minimized)"
        else
            createSmoothTween(mainFrame, {Size = originalSize}, 0.3)
            contentFrame.Visible = true
            minimizeBtn.Text = "−"
            titleLabel.Text = "⚡ Auto Upgrade " .. (isMobile and "📱" or "💻")
        end
    end)
    
    -- Touch support for mobile minimize
    if isMobile then
        minimizeBtn.TouchTap:Connect(function()
            minimizeBtn.MouseButton1Click:Fire()
        end)
    end
    
    -- Main toggle functionality
    toggleBtn.MouseButton1Click:Connect(function()
        AutoUpgradeSystem.enabled = not AutoUpgradeSystem.enabled
        
        if AutoUpgradeSystem.enabled then
            createSmoothTween(toggleBtn, {
                BackgroundColor3 = Color3.fromRGB(50, 120, 50)
            }, 0.2)
            toggleBtn.Text = "ON"
            toggleBtn.TextColor3 = Color3.fromRGB(100, 255, 100)
            
            -- Start optimized auto upgrade
            if AutoUpgradeSystem.connections.mainLoop then
                AutoUpgradeSystem.connections.mainLoop:Disconnect()
            end
            
            AutoUpgradeSystem.connections.mainLoop = RunService.Heartbeat:Connect(function()
                if AutoUpgradeSystem.enabled then
                    spawn(performSmartUpgradeOptimized)
                end
            end)
            
            createOptimizedNotification("🚀 Optimized Auto Upgrade Started!", Color3.fromRGB(100, 255, 100), 3)
        else
            createSmoothTween(toggleBtn, {
                BackgroundColor3 = Color3.fromRGB(60, 70, 80)
            }, 0.2)
            toggleBtn.Text = "OFF"
            toggleBtn.TextColor3 = Color3.fromRGB(255, 100, 100)
            
            if AutoUpgradeSystem.connections.mainLoop then
                AutoUpgradeSystem.connections.mainLoop:Disconnect()
                AutoUpgradeSystem.connections.mainLoop = nil
            end
            
            createOptimizedNotification("⏹️ Auto Upgrade Stopped", Color3.fromRGB(255, 100, 100), 2)
        end
    end)
    
    -- Touch support for main toggle
    if isMobile then
        toggleBtn.TouchTap:Connect(function()
            toggleBtn.MouseButton1Click:Fire()
        end)
    end
    
    -- Close button functionality
    closeBtn.MouseButton1Click:Connect(function()
        createSmoothTween(mainFrame, {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        }, 0.3)
        
        wait(0.3)
        screenGui:Destroy()
    end)
    
    -- Touch support for close
    if isMobile then
        closeBtn.TouchTap:Connect(function()
            closeBtn.MouseButton1Click:Fire()
        end)
    end
    
    -- Performance monitoring
    spawn(function()
        while screenGui.Parent do
            local fps = getFPS()
            local memory = getMemoryUsage()
            
            AntiLagSystem.performanceStats.avgFPS = fps
            AntiLagSystem.performanceStats.memoryUsage = memory
            
            -- Update performance indicator
            if fps > 45 then
                perfIndicator.Text = "🟢"
                perfIndicator.TextColor3 = Color3.fromRGB(100, 255, 100)
            elseif fps > 25 then
                perfIndicator.Text = "🟡"
                perfIndicator.TextColor3 = Color3.fromRGB(255, 255, 100)
            else
                perfIndicator.Text = "🔴"
                perfIndicator.TextColor3 = Color3.fromRGB(255, 100, 100)
            end
            
            -- Update stats
            local elements = AutoUpgradeSystem.detectedElements
            local buttonCount = #elements.upgradeButtons
            local padCount = #elements.buildingPads
            local remoteCount = #elements.remoteEvents
            
            statsLabel.Text = string.format(
                "📊 Performance Stats\nFPS: %d | Memory: %dMB | Lag: %d\nButtons: %d | Pads: %d | Remotes: %d",
                fps, math.floor(memory), AntiLagSystem.performanceStats.lagSpikes,
                buttonCount, padCount, remoteCount
            )
            
            wait(1)
        end
    end)
    
    return screenGui
end

-- Initialize Optimized System
local function initializeOptimizedSystem()
    print("🚀 Initializing Optimized Auto Upgrade System...")
    
    -- Apply initial optimizations
    applyAntiLagOptimizations()
    
    -- Start performance monitoring
    spawn(function()
        while true do
            performMemoryCleanup()
            wait(PerformanceManager.memoryCheckInterval)
        end
    end)
    
    -- Create optimized GUI
    createOptimizedGUI()
    
    -- Initial scan
    scanForUpgradeElementsOptimized()
    
    createOptimizedNotification(
        "⚡ Optimized Auto Upgrade Loaded!\n" .. 
        (isMobile and "📱 Mobile Mode" or "💻 PC Mode") .. 
        " • Anti-Lag • Minimize Support", 
        Color3.fromRGB(100, 200, 255), 4
    )
    
    print("✅ Optimized Auto Upgrade System ready!")
    print("📋 Optimizations:")
    print("   • Anti-lag system active")
    print("   • Memory management enabled")
    print("   • Batch processing implemented")
    print("   • Mobile optimizations applied")
    print("   • Smooth animations available")
    print("   • Minimize functionality added")
    print("   • Performance monitoring active")
end

-- Keyboard shortcuts (PC only)
if isPC then
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.KeyCode == Enum.KeyCode.F2 then
            if playerGui:FindFirstChild("AutoUpgradeOptimized") then
                playerGui.AutoUpgradeOptimized:Destroy()
            else
                createOptimizedGUI()
            end
        elseif input.KeyCode == Enum.KeyCode.F3 then
            -- Toggle anti-lag
            AntiLagSystem.enabled = not AntiLagSystem.enabled
            if AntiLagSystem.enabled then
                applyAntiLagOptimizations()
            end
            createOptimizedNotification("🚀 Anti-Lag " .. (AntiLagSystem.enabled and "ON" or "OFF"), 
                                       Color3.fromRGB(100, 255, 100), 2)
        end
    end)
end

-- Mobile gesture support
if isMobile then
    local touchStartTime = 0
    local touchCount = 0
    
    UserInputService.TouchStarted:Connect(function(touch, gameProcessed)
        if gameProcessed then return end
        touchStartTime = tick()
        touchCount = touchCount + 1
        
        -- Triple tap to toggle GUI
        spawn(function()
            wait(0.5)
            if touchCount >= 3 then
                if playerGui:FindFirstChild("AutoUpgradeOptimized") then
                    playerGui.AutoUpgradeOptimized:Destroy()
                else
                    createOptimizedGUI()
                end
            end
            touchCount = 0
        end)
    end)
end

-- Auto-reconnect on character respawn
player.CharacterAdded:Connect(function()
    wait(3)
    scanForUpgradeElementsOptimized()
    createOptimizedNotification("🔄 System reconnected after respawn", Color3.fromRGB(100, 200, 255), 2)
end)

-- Initialize
initializeOptimizedSystem()
